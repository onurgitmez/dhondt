#' Simulate Election
#'
#' This function simulates an election using the D'Hondt method of seat allocation.
#' @param df A dataframe containing the election data.
#' @param district_col The name of the column containing district names.
#' @param seats_col The name of the column containing the number of seats for each district.
#' @param parties A vector of column names that contain the number of votes for each party.
#' @param threshold The vote share threshold for eligibility. Defaults to 0.05.
#' @return A list where each element is the total number of seats won by a party.
#' @export
#' @examples
#' data(election_data)
#' simulate_election(election_data, "district", "seats", c("akp_votes", "chp_votes", "hdp_votes", "iyi_votes", "mhp_votes", "saadet_votes"))

simulate_election <- function(df, district_col, seats_col, parties, threshold = 0.05) {
  total_votes <- colSums(df[parties], na.rm = TRUE)
  vote_share <- total_votes / sum(total_votes)
  
  eligible_parties <- names(vote_share)[vote_share >= threshold]
  
  for (district in unique(df[[district_col]])) {
    district_data <- df[df[[district_col]] == district,]
    
    votes <- district_data[eligible_parties]
    seats <- district_data[[seats_col]]
    
    if (is.na(seats) || seats <= 0) {
      next
    }
    
    parties <- names(votes)
    results <- setNames(rep(0, length(parties)), parties)
    
    for (i in 1:seats) {
      max_votes <- 0
      winner <- ''
      for (party in parties) {
        party_votes <- votes[[party]]
        party_seats <- results[names(results) == party]
        quotient <- party_votes / (party_seats + 1)
        if (quotient > max_votes) {
          max_votes <- quotient
          winner <- party
        }
      }
      results[[winner]] <- results[[winner]] + 1
    }
    
    seat_winners <- as.data.frame(t(results))
    seat_winners$district <- district
    df[df[[district_col]] == district, paste0(eligible_parties, '_seats')] <- as.list(seat_winners[,eligible_parties])
  }
  
  df[, paste0(eligible_parties, '_seats')] <- apply(df[, paste0(eligible_parties, '_seats')], 2, as.numeric)
  
  total_seats <- colSums(df[, paste0(eligible_parties, '_seats')], na.rm = TRUE)
  
  results <- list()
  for (party in eligible_parties) {
    results[[party]] <- total_seats[[paste0(party, '_seats')]]
  }
  
  return(results)
}
